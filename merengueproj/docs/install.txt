Preparación de directorios 
--------------------------

Deberíamos tener en nuestro ordenador al menos dos directorios. En el proceso usaremos ordenes export para definirlos:

 * Uno para bajarnos proyectos externos del subversion (export SVNDIR=$HOME/src/SVN)
 * Uno para nuestros proyectos, bajados de nuestro subversion (export SRCDIR=$HOME/proyectos)


Instalaciones previas
---------------------

 * ipython: es un intérprete python con autocompletado, ayuda, etc. 

  # apt-get install ipython

 * postgresql: la base de datos que usaremos 

  # apt-get install postgresql

 * python-psycopg: interfaz de python con la base de datos postgresql 

  # apt-get install python-psycopg2

 * python-imaging: Para los campos tipo datos de los modelos

  # apt-get install python-imaging

 * geopy
  # easy_install geopy

 * python-beautifulsoup: para la limpieza del HTML en los campos de texto.
  # apt-get install python-beautifulsoup


Modos de instalación
--------------------

Hay dos métodos de instalación de merengue, según el tipo de proyecto CMS que deseas implementar:

 * Modo producción: supone que el desarrollador quiere trabajar con una versión de merengue congelada, y que no desea ir actualizando de versión a medida que desarrolla.

 * Modo desarrollo: el desarrollador quiere trabajar con la última versión de SVN de merengue, actualizando periódicamente para así ir siempre a la última.


Instalación de Django
---------------------

a) Para modo producción:

(( completar ))

b) Para modo desarrollo:

Nos bajamos del SVN de django:

  $ export SVNDIR=$HOME/src/SVN
  $ mkdir -p $SVNDIR
  $ cd $SVNDIR
  $ svn co http://code.djangoproject.com/svn/django/trunk/ django_src

Instalamos la API de django en el python del sistema (mejor la 2.4):

  # ln -s $SVNDIR/django_src/django  /usr/lib/python2.4/site-packages/django

Lo probamos con lo siguiente:

  $ ipython
  >>> import django
  >>>

Podemos usar alteratives para los ejecutables de django (si instalamos diferentes versiones podremos elegir). Ademas así no tenemos que escribir la ruta completa para usar cosas como django-admin.py:

sudo update-alternatives --install /usr/local/bin/django-admin.py django-admin.py /usr/lib/python2.4/site-packages/django/bin/django-admin.py 10

sudo update-alternatives --install /usr/local/bin/compile-messages.py  compile-messages.py /usr/lib/python2.4/site-packages/django/bin/compile-messages.py 10

sudo update-alternatives --install /usr/local/bin/make-messages.py  make-messages.py /usr/lib/python2.4/site-packages/django/bin/make-messages.py 10


Instalación de nuestro sistema
------------------------------

a) En modo producción:

(( completar ))

b) En modo desarrollo:

Nos bajamos el repositorio del proyecto (no necesario, porque si estás leyendo esto es que ya lo habrás realizado):

  $ export SRCDIR=$HOME/proyectos
  $ mkdir $SRCDIR
  $ cd $SRCDIR

Y para bajarse las últimas fuentes en desarrollo:

  $ svn co https://svnpub.yaco.es/merengue/trunk/merengueproj


Instalación de extensiones para GIS
-----------------------------------

Nota: las instrucciones de instalación están online en http://geodjango.org/docs/install.html

Para Ubuntu > 8.04, se hace todo desde paquetería, con la siguiente orden:

  $ sudo apt-get install binutils libgdal1-1.5.0 postgresql-8.3-postgis python-psycopg2 python-setuptools
  $ export PG_CONFIG='/usr/lib/postgresql/8.3/bin/pg_config'

Para Ubuntu <= 8.04, necesitamos compilarlo a mano:

 1. Cabeceras de código fuente de postgresql:

  $ sudo apt-get install postgresql-server-dev-8.2
  $ export PG_CONFIG='/usr/lib/postgresql/8.2/bin/pg_config'

 2. Librería GEOS:

  $ cd resources
  $ tar xjf geos-3.0.3.tar.bz2
  $ cd geos-3.0.3
  $ ./configure && make
  $ sudo make install

 3. Librería PROJ.4

  $ cd resources
  $ tar xzf proj-4.6.1.tar.gz
  $ cd proj-4.6.1/nad
  $ tar xzf ../../proj-datumgrid-1.4.tar.gz
  $ cd ..
  $ ./configure
  $ make
  $ sudo make install
  $ cd ..

 4. PostGIS

  $ tar xzf postgis-1.3.4.tar.gz
  $ cd postgis-1.3.4
  $ ./configure --with-pgsql=$PG_CONFIG --datadir=`$PG_CONFIG --sharedir`
  $ make
  $ sudo make install
  $ cd ..

 5. Librería GDAL

  $ tar xzf gdal-1.5.3.tar.gz
  $ cd gdal-1.5.3
  $ ./configure
  $ make # Go get some coffee, this takes a while.
  $ sudo make install
  $ cd ..

 6. Actualizar todas las librerías dinámicas

 Nota: asegurarse antes de que en el fichero /etc/ld.so.conf está el
incluido el directorio /usr/local/lib

  $ sudo ldconfig -v


Para fedora >= 10 podemos instalarlo de paqueteria:

  $ sudo yum install postgis geos proj gdal


Creación del proyecto en merengue
---------------------------------

  $ cd $SRCDIR/

a) En modo producción:

  $ ./merengueproj/bin/merengue-admin.py startproject myproject


b) En modo desarrollo:

  $ ./merengueproj/bin/merengue-admin.py startproject myproject --develop


Configuración de la base de datos
----------------------------------

Es necesario configurar la base de datos cambiando los parámetros DATABASE_* del fichero de configuración myproject/settings.py, creados con el comando merengue-admin.py

Nosotros supondremos que has configurado una BD postgresql con los siguientes parámetros::

    DATABASE_ENGINE = 'postgresql_psycopg2'
    DATABASE_NAME = 'myproject'
    DATABASE_USER = 'myproject'
    DATABASE_PASSWORD = ''
    DATABASE_HOST = ''
    DATABASE_PORT = ''

Suponemos que tu usuario tiene permisos de superadministrador de
Postgresql. Si no fuera el caso, hay que ejecutar lo siguiente:

  $ sudo su postgres
  $ createuser tuusuario  --> decir que será superadministrador
  $ exit    # volvemos a tu usuario

Creamos una base de datos plantilla para postgis:

  $ createdb -E UTF8 template_postgis
  $ createlang -d template_postgis plpgsql

  Para ubuntu > 8.04 (instalando postgres-8.3-postgis)

      $ PG_GIS_TEMPLATES=/usr/share/postgresql-8.3-postgis/
      $ psql -d template_postgis -f $PG_GIS_TEMPLATES/lwpostgis.sql
      $ psql -d template_postgis -f $PG_GIS_TEMPLATES/spatial_ref_sys.sql

  Para otro caso

      $ psql -d template_postgis -f `$PG_CONFIG --sharedir`/lwpostgis.sql
      $ psql -d template_postgis -f `$PG_CONFIG --sharedir`/spatial_ref_sys.sql

  $ psql -d template_postgis -c "GRANT ALL ON geometry_columns TO PUBLIC;"
  $ psql -d template_postgis -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;"

Creamos la base de datos:

  $ createuser myproject -P
  (asignamos la contraseña "myproject" y hacemos que sea superusuario, necesario para ejectuar test de portal)
  $ createdb -T template_postgis --owner=myproject myproject

Damos permiso de conexión a la base de datos desde el ordenador local. Editamos /etc/postgresql/X.X/main/pg_hba.conf, añadiendo la siguiente línea (no al final):

  local myproject myproject trust
  local test_myproject myproject trust  # necesario para la ejecucion de pruebas

Reiniciamos postgresql y comprobamos el acceso:

  # /etc/init.d/postgresql restart
  # psql myproject -U myproject

Accedemos al directorio de nuestro sistema ($SRCDIR/myproject). Comprobamos que el servidor django de desarrollo arranca bien:

  $ ./manage.py runserver


Construir la base de datos inicial
----------------------------------

La base de datos creada está vacía. Necesitamos construir el modelo de datos e incluir los datos iniciales mínimos.

Se realiza con el siguiente comando:

  $ ./manage.py rebuild_db --template=template_postgis

Visualizar el sitio
-------------------

Accedemos por el navegador a http://localhost:8000/admin/ y comprobamos que la web se ha levantado correctamente. Para ver la versión publica de la web, podemos acceder a http://localhost:8000/

Usuario para interfaz de administracíon:
Usuario: admin
Contraseña: andalucia06

Nota: hay que incluir las / finales en las URLs


Activar el autocompletado del manage.py (opcional)
--------------------------------------------------

Copiamos fichero django_bash_completion en /etc :

  $ sudo cp $SVNDIR/django_src/extras/django_bash_completion /etc

Activamos completado, incluyendo en el fichero $HOME/.bashrc lo siguiente:

  if [ -f /etc/django_bash_completion ]; then
    . /etc/django_bash_completion
  fi


Backup y reconstrucción de la base de datos
-------------------------------------------

Se puede hacer un backup en SQL de toda la base de datos, con el siguiente comando:

   $ ./manage.py backupdb

Cuando hay cambios en los modelos de datos, se puede reconstruir la base de datos entera (sólo en el servidor de desarrollo), mediante el comando siguiente:

   $ ./manage.py rebuild_db --template=template_postgis

El comando anterior adicionalmente y por motivos de seguridad, te realizará creará automáticamente una copia de seguridad.
