.. _topics-permissions:

========================
Working with permissions
========================

.. highlightlang:: html+django


Overview
========

Permission in merengue are strongly based on wonderful `django-permissions`_ application.

Main change (but important) is not using ``GenericForeignKey`` for granting
permissions to objects. We prefer use a ``ForeignKey`` to ``BaseContent`` for
performance reasons. Besides, in merengue all managed content are ``BaseContent``
instances.

.. _django-permissions: http://pypi.python.org/pypi/django-permissions

What is an permission?
----------------------

Permissions are granted to roles (and only to roles) in order to allow something to users or groups which have these roles.

What is an role?
----------------

Roles are used to grant permissions. Typical roles are Reader, Manager or Editor.

What is a local role?
---------------------

Local roles are roles which are assigned to users and groups for a specific content objects.

Users
-----

 * Users are actors which may need a permission to do something within the system.
 * Users can be member of several groups.
 * User can have several roles, directly or via a membership to a group (these are considered as global).
 * User can have local roles, directly or via a membership to a group. That is roles for a specific object.
 * Users have all roles of their groups - global and local ones.
 * Users have all permissions of their roles - global and local ones.

Groups
------

 * Groups combines users together.
 * Groups can have roles (these are considered as global).
 * Groups can have local roles, that is roles for a specific object.
 * Groups has all permissions of their roles - global and local ones.
 * Users of a Group have the groupâ€™s roles and permissions.


Builtin permissions on merengue
-------------------------------

A builtin permission will appears in the manage permission view of every content.

The builtin permissions in merengue are:

    View (``view``)
        A non published content will be visible for anonymous if this permission
        is activated for this content.

    Edit (``edit``)
        If a user is member of a role with this permission or for a content
        which has activated that permission for a user role, user will can edit
        the content.

    Delete (``delete``)
        If user has this permission in a content, user will be able to delete it.

    Can set as draft (``can_draft``)
        If user has this permission in a content, user will can to change the content status to draft.

    Can set as pending (``can_pending``)
        If user has this permission in a content, user will can to change the content status to pending.

    Can set as published (``can_published``)
        If user has this permission in a content, user will can to change the content status to published.

Global permissions on merengue
-------------------------------

    Manage section (``manage_section``)
      If user has this permission, user will be able to edit, delete and add sections.

    Manage link portal (``manage_link``)
      If user has this permission, user will be able to edit, delete and add portal links.

    Manage menu portal (``manage_menu``)
      If user has this permission, user will be able to edit, delete and add portal menus.

    Manage multimedia (``manage_multimedia``)
      If user has this permission, user will be able to edit, delete and add any multimedia content.

    Manage plugin content (``manage_plugin_content``)
      If user has this permission, user will be able to manage all contents from installed plugins.

    Manage category (``manage_category``)
      If user has this permission, user will be able to edit, delete and add categories.

    Manage portal (``manage_portal``)
      If user has this permission, user will be able to move portlets in public views and add sections to documents.

    Manage site (``manage_site``)
      If user has this permission, user will be able to manage blocks, plugins, themes, registered items and save/restore configuration.

    Manage user (``manage_user``)
      If user has this permission, user will be able to manage groups, users, roles and permissions.


Admin interface
===============

Creating a role and assigning user to role
------------------------------------------

(( to be completed ))

Assigning role to group
-----------------------

(( to be completed ))

Granting a permission to a content
----------------------------------

(( to be completed ))

Granting a permission to all contents
-------------------------------------

(( to be completed ))

Local roles
-----------

(( to be completed ))

Manage all permissions
----------------------

(( to be completed ))


Using the python API
====================

Creating a custom permission
----------------------------

.. code-block:: python

    >>> from merengue.perms.utils import register_permission
    >>> register_permission('Vote', 'vote')
    <Permission: Vote (vote)>
    >>> from merengue.perms.utils import register_permission
    >>> register_permission('Vote', 'vote')

You can create a custom permission available only for some models (inherited
from ``BaseContent``):

.. code-block:: python

    >>> from merengue.section.models import Document
    >>> from plugins.news.models import NewsItem
    >>> register_permission('My permission', 'myperm', 
                            for_models=[Document, NewsItem])
    <Permission: My permission (myperm)>

Creating a role and assigning user to role
------------------------------------------

.. code-block:: python

    >>> staff_user = User.objects.create(username='roque')
    >>> plain_user = User.objects.create(username='other')
    >>> from merengue.perms.utils import register_role
    >>> editor = register_role('Editor')
    >>> editor.add_principal(staff_user) # add user to role 'Editor'

Granting a permission to a content
----------------------------------

.. code-block:: python

    >>> from merengue.base.models import BaseContent
    >>> content = BaseContent.objects.create(slug='mycontent', name_en='My content')
    >>> from merengue.perms.utils import grant_permission
    >>> grant_permission(editor, 'vote', content)

Granting a permission to all contents
-------------------------------------

.. code-block:: python

    >>> grant_permission(editor, 'vote')

Checking permissions
--------------------

.. code-block:: python

    >>> from merengue.perms.utils import has_permission
    >>> has_permission(content, staff_user, 'vote')
    True

Removing a permission to a content
----------------------------------

.. code-block:: python

    >>> from merengue.perms.utils import remove_permission
    >>> remove_permission(editor, 'vote', content)

Removing a permission to all contents
----------------------------------

.. code-block:: python

    >>> remove_permission(editor, 'vote')


Local roles
-----------

You can assign a role to an user or a group, globally (for all contents) or locally (to one content).

.. code-block:: python

    >>> othercontent = BaseContent.objects.create(slug='othercontent', name_en='Other content')
    >>> grant_permission(editor, 'vote', othercontent) # like "content"
    >>> from merengue.perms.utils import add_local_role
    >>> add_local_role(othercontent, plain_user, editor)
    # plain_user will be editor only in othercontent
    >>> has_permission(content, plain_user, 'vote')
    False
    >>> has_permission(othercontent, plain_user, 'vote')
    True # because is local editor for that content
    >>> has_permission(othercontent, staff_user, 'vote')
    True # because is a global editor (for all contents)


Permissions in plugins
======================

You can create permissions for your plugins defining the function get_perms in the config.py file. These permissions can be globals or related to models and content types.

To define specific permissions, for example, to edit news:

.. code-block:: python

    from merengue.pluggable import Plugin
    from plugins.news.models import NewsItem

    class PluginConfig(Plugin):

        @classmethod
        def get_perms(cls):
            return (
                ('edit_newsitem', _('Edit news items'), [NewsItem, ]),)


To define global permissions to vote any such content:

.. code-block:: python

    from merengue.pluggable import Plugin

    class PluginConfig(Plugin):

        @classmethod
        def get_perms(cls):
            return (
                ('vote', _('Vote content')),)

