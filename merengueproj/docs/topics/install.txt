.. _topics-install:

=======================
How to install Merengue
=======================

This document will get you up and running with Merengue.

Directories preparation
=======================

We must have at least two directories in our computer. In the process
we use export command to define it.

* One to download subversion external projects: ``export SVNDIR=$HOME/src/SVN``
* Another one for merengue project: ``export SRCDIR=$HOME/projects``

Previous install
================

This documents describe which are the project dependencies and how to
install in a ubuntu/debian based distribution.

Some python packages are installed using easy_install, for use that
you need to have installed python-setuptools

Dependencies: ``python-imaging``, ``python-beautifulsoup``, ``johnny-cache``

* ``python-imaging``: adds image processing capabilities to your Python
  interpreter. For model data fields.

    .. code-block:: bash

        $ apt-get install python-imaging

* ``python-beautifulsoup``: a Python HTML/XML parser designed for quick
  turnaround projects like screen-scraping. For text field HTML
  cleaning.

    .. code-block:: bash

        $ apt-get install python-beautifulsoup

* ``johnny-cache``: Django app to speedup merengue providing a clever 
=======
* ``johnny-cache``: Django app to speedup merengue providing a clever
  cache mechanism.

    .. code-block:: bash

        $ easy_install johnny-cache

Recommended
-----------

* ``ipython``: a python shell with auto complete, help, etc.

    .. code-block:: bash

        $ apt-get install ipython

Install modes
-------------

There are two merengue install method, according to the type of CMS
project you want implement:

* Producction mode: using a stable freeze merengue version.

* Development mode: using the merengue svn trunk version.

Djando install
--------------

Merengue use a specific django version. We download the django version
from svn:

    .. code-block:: bash

        $ mkdir -p $SVNDIR
        $ cd $SVNDIR
        $ svn checkout http://code.djangoproject.com/svn/django/tags/releases/1.1 django_src

You can install it in your operating system using setup.py:

    .. code-block:: bash

        $ cd $SVNDIR/django_src/
        $ python setup.py install

But if you have django installed using package, you can add it to your
python path:

    .. code-block:: bash

        $ export PYTHONPATH=$SVNDIR/django_src/django:$PYTHONPATH

And for bin:

    .. code-block:: bash

        $ export PATH=$SVNDIR/django_src/django/bin:$PATH

Test if you have the correct django version:

    .. code-block:: bash

        $ python -c "import django; print django.VERSION"
        $ (1, 1, 0, 'final', 0)


We can use alternatives for django-admin (if we install different
versions we can choose). Furthermore we don't need to write complete
path to use it:

    .. code-block:: bash

       $ sudo update-alternatives --install /usr/local/bin/django-admin.py django-admin.py /usr/lib/pythonX.X/site-packages/django/bin/django-admin.py 10
       $ sudo update-alternatives --install /usr/local/bin/compile-messages.py  compile-messages.py /usr/lib/pythonX.X/site-packages/django/bin/compile-messages.py 10
       $ sudo update-alternatives --install /usr/local/bin/make-messages.py  make-messages.py /usr/lib/pythonX.X/site-packages/django/bin/make-messages.py 10


Installing merengue
-------------------

Download the project repository (not necessary, because you are
reading that, you downloaded it before):

    .. code-block:: bash

        $ mkdir $SRCDIR
        $ cd $SRCDIR
        $ svn checkout https://svnpub.yaco.es/merengue/trunk/merengueproj

Merengue project creation
-------------------------

    .. code-block:: bash

        $ cd $SRCDIR/

* Production mode:

    .. code-block:: bash

        $ ./merengueproj/bin/merengue-admin.py startproject myproject


* Development mode:

    .. code-block:: bash

        $ ./merengueproj/bin/merengue-admin.py startproject myproject --develop


Database configuration
----------------------

It's necessary configure the database changing ``DATABASE_*`` parameters
in the configuration file ``myproject/settings.py``, created with
``merengue-admin.py``

Let's suppose that you were configuring a postgresql database with the
following parameters:

    .. code-block:: bash

       DATABASE_ENGINE = 'postgresql_psycopg2'
       DATABASE_NAME = 'myproject'
       DATABASE_USER = 'myproject'
       DATABASE_PASSWORD = 'password'
       DATABASE_HOST = 'localhost'
       DATABASE_PORT = '5432'

You can use all database engine supported by django
http://docs.djangoproject.com/en/1.1/ref/settings/#database-engine

Creating the project database (postgresql):
-------------------------------------------

We suppose that your use has superadmin permissions in postgresql. If
not, you can do it:

    .. code-block:: bash

        $ sudo su postgres
        $ createuser yourusername # when ask say yes to be a superadmin
        $ exit

We set "myproject" password and make that users superuser, necessary
for exec portal test.

    .. code-block:: bash

        $ createuser myproject -P
        $ createdb --owner=myproject myproject

Building the initial database:
----------------------------------

The created database is empty. We need to build the data model and add
minimal initial data.

You can do it with that command:

    .. code-block:: bash

        $ ./manage.py syncdb

You can ignore the creation of superuser because it will be created
with fixtures.

View the site
-------------

    .. code-block:: bash

        $ ./manage.py runserver


Open the web browser and go to http://localhost:8000/admin/ and check
that the web is running successfully.

To see the web public version, we can access to http://localhost:8000/

Default admin interface user:

.. code-block:: bash

    user: admin
    password: admin

.. admonition: Note

    It's necessary to put the end ``/`` in urls


More information
================

Activate the manage.py auto completion
--------------------------------------

Copy the file ``django_bash_completion`` in ``/etc``:

    .. code-block:: bash

        $ sudo cp $SVNDIR/django_src/extras/django_bash_completion /etc

We activate the auto complete including in file ``$HOME/.bashrc`` the following
line:

    .. code-block:: bash

        if [ -f /etc/django_bash_completion ]; then
          . /etc/django_bash_completion
        fi


=====================
Installation with GIS
=====================

If you want to install with GIS support it's necessary some specific
installations and configurations.

Previous install
================

Apart from the previous dependencies if you want to use GIS there are
more dependencies.

Dependencies: ``postgresql``, ``python-psycopg2``, ``geopy``

* ``postgresql``: the object-relational database system that we will use.

    .. code-block:: bash

        $ apt-get install postgresql

* ``python-psycopg``: python interface to postgresql database.

    .. code-block:: bash

        $ apt-get install python-psycopg2

* ``geopy``: makes it easy for developers to locate the coordinates of
  addresses, cities, countries, and landmarks across the globe.

    .. code-block:: bash

        $ easy_install geopy


GIS extensions install
----------------------

.. admonition:: Note

    Install instructions are online at http://geodjango.org/docs/install.html

In Ubuntu > 8.04, you can install all using packages:

    .. code-block:: bash

        $ sudo apt-get install binutils libgdal1-1.5.0 postgresql-8.3-postgis python-psycopg2 python-setuptools
        $ export PG_CONFIG='/usr/lib/postgresql/8.3/bin/pg_config'


.. admonition:: Note

    If you have postgresql-8.4 and there is no package
    ``postgresql-8.4-postgis``, you will use ``postgresql-8.3`` for all, use the
    option ``-p 5433`` with ``psql``, ``createuser``, ``createdb``, and
    configure your merengue project to use that port in database.

If your distribution doesn't have the package postgis it's necessary to
compile:

1. PostgreSQL source headers:

    .. code-block:: bash

        $ sudo apt-get install postgresql-server-dev-X.X
        $ export PG_CONFIG='/usr/lib/postgresql/X.X/bin/pg_config'

2. `GEOS`_ library:

    .. code-block:: bash

         $ cd resources
         $ tar xjf geos-x.x.x.tar.bz2
         $ cd geos-x.x.x
         $ ./configure && make
         $ sudo make install

3. `PROJ.4`_ library:

    .. code-block:: bash

         $ cd resources
         $ tar xzf proj-x.x.x.tar.gz
         $ cd proj-x.x.x/nad
         $ tar xzf ../../proj-datumgrid-x.x.tar.gz
         $ cd ..
         $ ./configure
         $ make
         $ sudo make install
         $ cd ..

4. `PostGIS`_:

    .. code-block:: bash

         $ tar xzf postgis-x.x.x.tar.gz
         $ cd postgis-x.x.x
         $ ./configure --with-pgsql=$PG_CONFIG --datadir=`$PG_CONFIG --sharedir`
         $ make
         $ sudo make install
         $ cd ..

5. `GDAL`_ library:

    .. code-block:: bash

         $ tar xzf gdal-x.x.x.tar.gz
         $ cd gdal-x.x.x
         $ ./configure
         $ make $ Go get some coffee, this takes a while.
         $ sudo make install
         $ cd ..

6. Update all dynamic libraries:

    .. code-block:: bash

        $ sudo ldconfig -v

* In fedora >= 10 we can install using packages:

    .. code-block:: bash

        $ sudo yum install postgis geos proj gdal

.. admonition:: Note

    Make sure that the file ``/etc/ld.so.conf`` is in directory
    ``/usr/local/lib``

.. _`GEOS`: http://trac.osgeo.org/geos/
.. _`PROJ.4`: http://download.osgeo.org/proj/
.. _`PostGIS`: http://postgis.refractions.net/
.. _`GDAL`: http://trac.osgeo.org/gdal/

Settings
--------

For use GIS it's necessary to add some lines to settings.py:

    .. code-block:: python

       USE_GIS = True
       INSTALLED_APPS += ('django.contrib.gis', 'merengue.places')

Database configuration
----------------------

It's necessary configure the database changing ``DATABASE_*`` parameters
in the configuration file ``myproject/settings.py``, created with
``merengue-admin.py``

Let's suppose that you were configuring a postgresql database with the
following parameters:

    .. code-block:: bash

       DATABASE_ENGINE = 'postgresql_psycopg2'
       DATABASE_NAME = 'myproject'
       DATABASE_USER = 'myproject'
       DATABASE_PASSWORD = ''
       DATABASE_HOST = ''
       DATABASE_PORT = ''

We suppose that your use has superadmin permissions in postgresql. If
not, you can do it:

    .. code-block:: bash

        $ sudo su postgres
        $ createuser yourusername # when ask say yes to be a superadmin
        $ exit

Create postgis template database:

    .. code-block:: bash

        $ createdb -E UTF8 template_postgis
        $ createlang -d template_postgis plpgsql

* In ubuntu > 8.04 (with postgres-8.3-postgis package)

    .. code-block:: bash

            $ PG_GIS_TEMPLATES=/usr/share/postgresql-8.3-postgis/
            $ psql -d template_postgis -f $PG_GIS_TEMPLATES/lwpostgis.sql
            $ psql -d template_postgis -f $PG_GIS_TEMPLATES/spatial_ref_sys.sql

.. admonition:: Note

     Remember that if you have postgresql-8.3 and 8.4 running at the
     same time you need to add -p 5433 option to psql createdb and
     createlang commands.

* In other case:

    .. code-block:: bash

        $ psql -d template_postgis -f `$PG_CONFIG --sharedir`/lwpostgis.sql
        $ psql -d template_postgis -f `$PG_CONFIG --sharedir`/spatial_ref_sys.sql
        $ psql -d template_postgis -c "GRANT ALL ON geometry_columns TO PUBLIC;"
        $ psql -d template_postgis -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;"


Creating the project database:
------------------------------

We set "myproject" password and make that users superuser, necessary
for exec portal test.

    .. code-block:: bash

        $ createuser myproject -P
        $ createdb -T template_postgis --owner=myproject myproject

We permit connections to database from local computer. Editing
/etc/postgresql/X.X/main/pg_hba.conf adding the following line (not at
the end):

    .. code-block:: bash

        local myproject myproject trust
        local test_myproject myproject trust # necessary for tests

Restart postgresql and check access:

    .. code-block:: bash

        $ /etc/init.d/postgresql restart
        $ psql myproject -U myproject

Go to our project directory (``$SRCDIR/myproject``). Test that django
development server runs ok:

    .. code-block:: bash

        $ ./manage.py runserver


Building the initial database:
------------------------------

The created database is empty. We need to build the data model and add
minimal initial data.

You can do it with that command:

    .. code-block:: bash

        $ ./manage.py rebuild_db --template=template_postgis

Database backup and rebuild
---------------------------

You can make a database backup in SQL with the following command:

    .. code-block:: bash

        $ ./manage.py backupdb

When you make changes in your data models, you can rebuild the
database (only in development server), with the following command:

    .. code-block:: bash

        $ ./manage.py rebuild_db --template=template_postgis

The previous command for security reasons makes a database backup.
