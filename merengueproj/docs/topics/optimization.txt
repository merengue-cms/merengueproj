.. _topics-optimization:

==================================
Optimizing a Merengue installation
==================================

Merengue features several optimization settings that can greatly increase your site performance.


Compressing Javascript and CSS files
====================================

For performance reasons, Merengue will place most Javascript files close to the
``</body>`` HTML tag. CSS assets will be located in the ``<head>`` section.

You can compress those files by setting the ``COMPRESS`` setting to
``True``

.. note::

    By default the ``COMPRESS`` value is set to ``not DEBUG``. If you set ``DEBUG`` to
    ``False`` when deploying the website (recomended practice), you do not have
    to explicitly change the ``COMPRESS`` setting.


Configuring Caching
===================

Merengue uses cache for doing next optimizations:

* **Cache the SQL sentences**, using `Johnny Cache`_. This fantastic application handles transparent caching of all your data models. When a user updates any model content, the cache for this model is invalidated transparently.
* **Block caching**. All the blocks can be cached if it is configured in administrative interface. See :ref:`block caching <topics-userguide-block_caching>` in userguide for more information.
* **Anonymous cache for entire site**. All the site can be cached for anonymous users. See :ref:`site cache for anonymous users <topics-optimization-anonymous-cache>`.
* **Template caching**, included in Django >1.2. See :ref:`template cache <topics-optimization-template-cache>`.

For all kinds of cache Merengue uses the local memory (by default) for caching. A problem arises when the local
memory backend is used in multithreaded environments with the setting:

.. code-block:: python

    CACHES = {
        'default': {
            'BACKEND': 'johnny.backends.locmem.LocMemCache',
            'KEY_PREFIX': SECRET_KEY,
        }
    }

In multithreaded environments, this configuration may cause random errors where
views are not refreshed correctly after content modification, because the 
invalidation action only will happen in one thread memory, not in the other
threads. The "fix" for this problem is to change the cache backend to something
like memcached:

.. code-block:: python

    CACHES = {
        'default': {
            'BACKEND': 'johnny.backends.memcached.MemcachedCache',
            'LOCATION': '127.0.0.1:11211',
            'JOHNNY_CACHE': True,
        }
    }

.. _`Johnny Cache`: http://packages.python.org/johnny-cache/

.. _topics-optimization-template-cache:

Template Caching
================

Django 1.3 allows for the caching of compiled templates (see 
`django.template.loaders.cached.Loader loader`_). This could vastly speed up a
Merengue site because Merengue page layouts are rendered with many templates
which display specific parts of each page.

In order to activate the caching of templates, you will need to change the
``TEMPLATE_LOADERS`` setting in your project settings as follow:

.. code-block:: python

    TEMPLATE_LOADERS = (
        ('django.template.loaders.cached.Loader', TEMPLATE_LOADERS),
    )

The ``TEMPLATE_LOADERS`` variable is defined in the ``merengue/settings.py`` file.
Essentially, we've wrapped the Merengue template loaders with the
``django.template.loaders.cached.Loader`` loader.

See more on template caching in :ref:`Optimizing a Merengue installation <topics-optimization>`.

.. _`django.template.loaders.cached.Loader loader`: http://docs.djangoproject.com/en/1.3/ref/templates/api/#loader-types

.. _topics-optimization-anonymous-cache:

Site Cache for anonymous users
==============================

Merengue takes advantage of the built-in anonymous site caching from Django. You can activate this feature in your project settings:

.. code-block:: python

    CACHE_SITE_FOR_ANONYMOUS = True

This setting will cache all request from anonymous users, so the view that generates the response template is only run the first time.

Note that, unlike Django's default behaviour, Merengue caches all requests even if they have GET parameters.

Cache invalidation
------------------

There are certains occasions where a site manager would want to invalidate the cache for a certain URL. Think for example a news item published with a mistake that needs to be amended right away: anonymous users will keep on reading the cached version until it expires, which usually takes a whole day. Is in the interest of the site managers to force the invalidation of the cache version once the news item has been corrected.

When the cache is active and a manager is logged in, a new button named ``invalidate cache`` is added to the Merengue toolbar. Clicking on it will invalidate the cache for the current page. Note that the invalidation takes effect for all installed languages in the site.

Session Cache
=============

By default Merengue sessions are implemented by Django. Django sessions are
stored by default in the project database. This implies that all the requests
will be execute at least one SQL to fetch the current session. You can avoid
this SQL sentence using cached sessions (for example in Memcached). See the
`Django cached sessions`_ documentation for more information.

.. _`Django cached sessions`: http://docs.djangoproject.com/en/1.3/topics/http/sessions/#using-cached-sessions